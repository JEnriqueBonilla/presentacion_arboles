summary(cars)
library(rmarkdown)
render("report.Rmd", ouput_file = "report.html")
render("Presentacion_arboles.Rmd", ouput_file = "Presentacion_arboles.html")
library(knitr)
sessionInfo()
```{ eval=T}
plotr(mtcars)
plot(mtcars)
mtcars
summary(mtcars)
install.packages("shiny")
---
install.packages("randomForest")
install.packages("knn")
install.packages("kknn")
install.packages("CHAID")
install.packages("CHAID", repos = "http://R-Forge.R-project.org", type = "source")
install.packages("partykit")
install.packages("gbm")
+ Data modeling culture
Existen 2 formas de concebir el modelado estadístico:
* Data modeling culture
## Aprendizaje estadístico y Machine learning
#### Aprendizaje estadístico y Machine learning
# Introducción {.emphasized}
* b
css: ./css/markdown3.css
css: ./css/markdown8.css
css: ./css/swiss.css
header-includes:
+ Alogiritmic modeling culture: (poca teoría, muchos datos). \\
![Regresion lineal](./imagenes/regresion_lineal.png) ![Clasificacion](./imagenes/clasificacion.png)
install.packages("png")
plot(img)
install.packages("grid")
install.packages("gridextra")
?gridraste
?grid.raster
??grid.raster
img <- readPNG("./imagenes/regresion_lineal.png")
library(png)
img <- readPNG("./imagenes/regresion_lineal.png")
img2 <- readPNG("./imagenes/clasificacion.png")
![prueba 1.](./imagenes/regresion_lineal.png)
![Regresion lineal](./imagenes/regresion_lineal.png) ![Clasificacion](./imagenes/clasificacion.png)
install.packages(grid)
install.packages("grid")
install.packages("tufte", type = "source")
library(rmarkdown)
draft("my_handout.Rmd", template = "tufte_html", package = "tufte")
img <- readPNG("./imagenes/regresion_lineal.png")
faithful %>% ggplot(aes(x = eruptions, y = waiting)) + geom_point() +
geom_smooth(method='lm') +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
xlab("Erupción")
library(dplyr)
library(stringr)
library(dplyr)
library(stringr)
library(ggplot2)
de [@friedman2001elements]]
diamonds
library(plyr)
library(stringr)
library(ggplot2)
library(kknn)
data(miete)
(train.con <- train.kknn(nmqm ~ wfl + bjkat + zh, data = miete,
kmax = 25, kernel = c("rectangular", "triangular", "epanechnikov",
"gaussian", "rank")))
plot(train.con)
(train.ord <- train.kknn(wflkat ~ nm + bjkat + zh, miete, kmax = 25,
kernel = c("rectangular", "triangular", "epanechnikov", "gaussian",
"rank")))
plot(train.ord)
(train.nom <- train.kknn(zh ~ wfl + bjkat + nmqm, miete, kmax = 25,
kernel = c("rectangular", "triangular", "epanechnikov", "gaussian",
"rank")))
plot(train.nom)
data(glass)
glass <- glass[,-1]
(fit.glass1 <- train.kknn(Type ~ ., glass, kmax = 15, kernel =
c("triangular", "rectangular", "epanechnikov"), distance = 1))
(fit.glass2 <- train.kknn(Type ~ ., glass, kmax = 15, kernel =
c("triangular", "rectangular", "epanechnikov"), distance = 2))
plot(fit.glass1)
plot(fit.glass2)
miete
glass
tipo))) + geom_line() + geom_point() + xlab("Grados de libertad") + ylab("Error")
tamano <- floor(0.75 * nrow(miete))
set.seed(15)
entrena_ind <- sample(seq_len(nrow(miete)),
size = tamano)
entrena <- miete[entrena_ind, ]
prueba <- miete[-enrena_ind, ]
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(cnmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - sim.prueba$color)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - sim.datos$color)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- melt(errores.vmc, id.vars = "k")
err.m$N.k <- floor(500/err.m$k)
err.m$tipo <- "kvmc"
err.m %>%
ggplot(aes(x = factor(N.k), y = value,
colour = variable,
group = interaction(variable,tipo))) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
tamano <- floor(0.75 * nrow(miete))
set.seed(15)
entrena_ind <- sample(seq_len(nrow(miete)),
size = tamano)
entrena <- miete[entrena_ind, ]
prueba <- miete[-entrena_ind, ]
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(cnmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - sim.prueba$color)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - sim.datos$color)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - sim.prueba$color)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - sim.datos$color)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- melt(errores.vmc, id.vars = "k")
errores.vmc
err.m$tipo <- "kvmc"
errores.vmc$tipo <- "kvmc"
errores.vmc
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
library(dplyr)
err.m <- errores.vmc %>%
gather(variable, valor, -k)
library(tidyr)
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m
err.m$tipo <- "kvmc"
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
tamano <- floor(0.50 * nrow(miete))
set.seed(15)
entrena_ind <- sample(seq_len(nrow(miete)),
size = tamano)
entrena <- miete[entrena_ind, ]
prueba <- miete[-entrena_ind, ]
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 490), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500, 750), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500, 700), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500, 700), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - prueba$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500, 700), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - entrena$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - entrena$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrena = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k)
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
err.m <- errores.vmc %>%
gather(variable, valor, -k) %>%
mutate(N.k = floor(500/k) )
err.m <- errores.vmc %>%
gather(variable, valor, -k) %>%
mutate(n.k = floor(500/k) )
err.m %>%
ggplot(aes(x = factor(n.k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
err.m %>%
ggplot(aes(x = factor(k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
err.m %>%
ggplot(aes(x = factor(n.k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
tamano <- floor(0.50 * nrow(miete))
set.seed(15)
entrena_ind <- sample(seq_len(nrow(miete)),
size = tamano)
entrena <- miete[entrena_ind, ]
prueba <- miete[-entrena_ind, ]
errores.vmc <- ldply(c(1, 5, 10, 20, 50, 100, 250, 500), function(i) {
vecino.k.prueba <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = prueba,
k = i, kernel = "rectangular")
vecino.k.entrena <- kknn(nmqm ~ wfl + bjkat + zh,
train = entrena,
test = entrena,
k = i, kernel = "rectangular")
error.prueba <- mean((fitted(vecino.k.prueba) - prueba$nmqm)^2)
error.entrena <- mean((fitted(vecino.k.entrena) - entrena$nmqm)^2)
data.frame(k = i, prueba = error.prueba, entrenamiento = error.entrena)
})
err.m <- errores.vmc %>%
gather(variable, valor, -k) %>%
mutate(n.k = floor(500/k) )
err.m %>%
ggplot(aes(x = factor(n.k), y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_point() +
xlab("Grados de libertad") +
ylab("Error")
