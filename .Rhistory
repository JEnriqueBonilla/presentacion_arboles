geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = 1) +
theme_dendro() +
coord_polar(theta="y")
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = 1) +
theme_dendro() +
scale_y_reverse(expand = c(0.2, 0)) +
coord_polar(theta="x")
plot(tree2, type = "triangle")
plot(arbol2, type = "triangle")
plot(arbol2)
text(tree2, use.n=TRUE)
plot(ddata)
plot(as.dendrogram(ddata))
plot(as.dendrogram(arbol2))
ddata <- dendro_data(arbol2, uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = 1) +
theme_dendro() #+ scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena_arb <- BostonHousing[BostonHousing$train,]
prueba_arb <- BostonHousing[!BostonHousing$train,]
entrena_arb$train <- NULL
arbol_housing <- rpart(medv~., data = entrena_arb, method = "class", # "anova"
control=rpart.control(cp=0 ,xval=10))
arbol_housing <- rpart(medv~., data = entrena_arb, method = "class", # "anova"
control=rpart.control(cp=0 ,xval=10))
data <- arbol_housing$cptable %>% data.frame
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
options(digits=2)
arbol_housing <- rpart(medv~., data = entrena_arb, method = "class", # "anova"
control=rpart.control(cp=0 ,xval=10))
data <- arbol_housing$cptable %>% data.frame
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
options(digits=2)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena_arb <- BostonHousing[BostonHousing$train,]
prueba_arb <- BostonHousing[!BostonHousing$train,]
entrena_arb$train <- NULL
arbol_housing <- rpart(medv~., data = entrena_arb, method = "class", # "anova"
control=rpart.control(cp=0 ,xval=10))
data <- arbol_housing$cptable %>% data.frame
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
arbol_housing <- rpart(medv~., data = entrena_arb, method = "anova", # "anova"
control=rpart.control(cp=0 ,xval=10))
data <- arbol_housing$cptable %>% data.frame
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
data
arbol_housing <- rpart(medv~., data = BostonHousing, method = "anova", # "anova"
control=rpart.control(cp=0 ,xval=10))
data <- arbol_housing$cptable %>% data.frame
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
plot(arbol_housing)
entrena_arb <- BostonHousing[BostonHousing$train,]
arbol_housing$cptable %>%
data.frame
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.factor(round(cp, 2)))
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.factor(round(CP, 2)))
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 2)))
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = as.numeric(cp))) +
geom_point() + geom_line() + geom_text()
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = cp, y = valor, group = variable, colour = variable, label = nsplit)) +
geom_point() + geom_line() + geom_text()
data %>%
gather(variable, valor, rel_error:xstd ) %>%
filter(variable != "xstd") %>%
ggplot(aes(x = nsplit, y = valor, group = variable, colour = variable, label = cp)) +
geom_point() + geom_line() + geom_text()
options(digits=4)
###################################################
### chunk number 2:
###################################################
library(rpart)
library(maptree)
library(ROCR)
library(xtable)
spam.train<-read.table("./presentacion/extras/Scripts Felipe/ejemplo_CART_spam/data/spam.train",sep=",")
names(spam.train) <- c("wfmake", "wfaddress", "wfall", "wf3d", "wfour",
"wfover", "wfremove", "wfinternet", "wforder", "wfmail",
"wfreceive", "wfwill", "wfpeople", "wfreport", "wfaddresses",
"wffree", "wfbusiness", "wfemail", "wfyou", "wfcredit", "wfyour",
"wffont", "wf000", "wfmoney", "wfhp", "wfhpl", "wfgeorge", "wf650",
"wflab", "wflabs", "wftelnet", "wf857", "wfdata", "wf415", "wf85",
"wftechnology", "wf1999", "wfparts", "wfpm", "wfdirect", "wfcs",
"wfmeeting", "wforiginal", "wfproject", "wfre", "wfedu", "wftable",
"wfconference", "cfsc", "cfpar", "cfbrack", "cfexc", "cfdollar",
"cfpound", "crlaverage", "crllongest", "crltotal", "spam")
spam.train$spam<-as.factor(spam.train$spam)
table(spam.train$spam)
table(spam.train$spam)/length(spam.train$spam)
set.seed(22)
control.completo<-rpart.control(cp=0, minsplit=10,
minbucket=1, xval=10, maxdepth=30)
spam_tree_completo<-rpart(spam~.,data = spam.train, method="class",
control = control.completo)
par(mar=c(1,1,1,1))
par(lwd=0.3)
plot(spam_tree_completo,uniform=T)
text(spam_tree_completo,use.n=T,cex=0.2)
predicted <- predict(spam_tree_completo, type="class")
1-mean(predicted==spam.train$spam)
table(predicted,spam.train$spam)
prop.table(table(predicted,spam.train$spam),2)
#### Ahora podamos el arbol gigante
printcp(spam_tree_completo)
plotcp(spam_tree_completo)
## podamos al tamaño que está a una desviación estándar del mínimo parámetro de complejidad (cp)
spam_tree_podado <- prune(spam_tree_completo,cp=0.0028)
print(spam_tree_podado)
predicted<-predict(spam_tree_podado,type="class")
print(1-mean(predicted==spam.train$spam),digits=2)
table(predicted,spam.train$spam,deparse.level=2)
print(prop.table(table(predicted,spam.train$spam,deparse.level=2),2),digits=2)
predicted.prob <- predict(spam_tree_podado)
plot(spam_tree_podado, uniform=TRUE)
text(spam_tree_podado, use.n=TRUE)
spam_tree_podado_2<-prune(spam_tree_completo,cp=0.01)
draw.tree(spam_tree_podado, nodeinfo=TRUE)
dev.off()
printcp(spam_tree_podado)
summary(spam_tree_podado)
data %>%
gather(variable, valor, rel_error:xstd ) %>%
.Primitive("names")
arbol_housing$cptable
library(rpart)
library(maptree)
library(ROCR)
library(xtable)
spam.train<-read.table("./presentacion/extras/Scripts Felipe/ejemplo_CART_spam/data/spam.train",sep=",")
names(spam.train) <- c("wfmake", "wfaddress", "wfall", "wf3d", "wfour",
"wfover", "wfremove", "wfinternet", "wforder", "wfmail",
"wfreceive", "wfwill", "wfpeople", "wfreport", "wfaddresses",
"wffree", "wfbusiness", "wfemail", "wfyou", "wfcredit", "wfyour",
"wffont", "wf000", "wfmoney", "wfhp", "wfhpl", "wfgeorge", "wf650",
"wflab", "wflabs", "wftelnet", "wf857", "wfdata", "wf415", "wf85",
"wftechnology", "wf1999", "wfparts", "wfpm", "wfdirect", "wfcs",
"wfmeeting", "wforiginal", "wfproject", "wfre", "wfedu", "wftable",
"wfconference", "cfsc", "cfpar", "cfbrack", "cfexc", "cfdollar",
"cfpound", "crlaverage", "crllongest", "crltotal", "spam")
spam.train$spam<-as.factor(spam.train$spam)
###################################################
### chunk number 3:
###################################################
table(spam.train$spam)
table(spam.train$spam)/length(spam.train$spam)
###################################################
set.seed(22)
control.completo<-rpart.control(cp=0, minsplit=10,
minbucket=1, xval=10, maxdepth=30)
spam_tree_completo<-rpart(spam~.,data = spam.train, method="class",
control = control.completo)
par(mar=c(1,1,1,1))
par(lwd=0.3)
plot(spam_tree_completo,uniform=T)
text(spam_tree_completo,use.n=T,cex=0.2)
#print(draw.tree(spam_tree_completo,nodeinfo=TRUE,cex=0.2,print.levels=TRUE))
predicted <- predict(spam_tree_completo, type="class")
1-mean(predicted==spam.train$spam)
table(predicted,spam.train$spam)
prop.table(table(predicted,spam.train$spam),2)
printcp(spam_tree_completo)
plotcp(spam_tree_completo)
spam_tree_podado <- prune(spam_tree_completo,cp=0.0028)
print(spam_tree_podado)
options(digits=2)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena_arb <- BostonHousing[BostonHousing$train,]
prueba_arb <- BostonHousing[!BostonHousing$train,]
entrena_arb$train <- NULL
arbol_housing <- rpart(medv~., data = train, method = "anova",
control=rpart.control(cp=0 , xval=10))
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
arbol_housing <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=10))
data <- arbol_housing$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(data) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
names(data)
data
data %>%
ggplot(aes(x = cp, y = xerror, label = nsplit)) +
geom_point() + geom_line() + geom_text()
options(digits=2)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena_arb <- BostonHousing[BostonHousing$train,]
prueba_arb <- BostonHousing[!BostonHousing$train,]
entrena_arb$train <- NULL
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=10))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(compledijdad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = cp, y = xerror, label = nsplit)) +
geom_point() + geom_line() + geom_text()
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=10))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = round(CP, 4))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_point() + geom_line() + geom_text()
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() + geom_text()
complejidad
complejidad %>%
dplyr::select(nsplit, cp, xerror)
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = TRUE)
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = TRUE)
complejidad %>%
dplyr::select(nsplit, cp, xerror)
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=10))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = TRUE)
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T) + geom_label()
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45)
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45) +
xlab("Tamaño del árbol") + ylab("Error de validación cruzada (10)")
complejidad %>%
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=20))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=20))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45) +
xlab("Tamaño del árbol") + ylab("Error de validación cruzada (10)")
complejidad$cp
alpha <- complejidad$cp
modelo_arb_completo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45) +
xlab("Tamaño del árbol") + ylab("Error de validación cruzada (10)")
complejidad %>%
dplyr::select(nsplit, cp, xerror)
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 6)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45) +
xlab("Tamaño del árbol") + ylab("Error de validación cruzada (10)")
complejidad %>%
dplyr::select(nsplit, cp, xerror)
complejidad <- modelo_arb_completo$cptable %>%
data.frame %>%
mutate(CP = as.character(round(CP, 4)))
names(complejidad) <- c("cp","nsplit", "rel_error", "xerror", "xstd")
complejidad %>%
ggplot(aes(x = nsplit, y = xerror, label = cp)) +
geom_line() +geom_text(check_overlap = T, angle = 45) +
xlab("Tamaño del árbol") + ylab("Error de validación cruzada (10)")
complejidad %>%
dplyr::select(nsplit, cp, xerror) %>%
head(80)
complejidad %>%
dplyr::select(nsplit, cp, xerror) %>%
head(60)
alpha <- complejidad$cp
predicted <- predict(spam_tree_completo, type="class")
1-mean(predicted==spam.train$spam)
i <- 0
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
error.entrena
error.prueba
i <- 0.0016
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = i, prueba = error.prueba,
error.entrena
error.prueba
errores.vmc <- ldply(alpha,
function(i) {
i <- 0.0016
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = i, prueba = error.prueba,
entrenamiento = error.entrena)
})
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench) #data BostonHousing
errores.vmc <- ldply(alpha,
function(i) {
i <- 0.0016
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = i, prueba = error.prueba,
entrenamiento = error.entrena)
})
data(BostonHousing)
set.seed(111)
train<-sample(1:nrow(BostonHousing),400)
BostonHousing$train<-FALSE
BostonHousing$train[train]<-TRUE
BostonHousing_train<-BostonHousing[BostonHousing$train,]
BostonHousing_test<-BostonHousing[!BostonHousing$train,]
BostonHousing_train$train<-NULL
arbol_housing <- rpart(medv~.,data=BostonHousing_train,method="anova",control=rpart.control(cp=0.001,xval=10))
printcp(arbol_housing)
plotcp(arbol_housing)
mean((predict(arbol_housing, BostonHousing_test)-BostonHousing_test$medv)^2)
library(randomForest)
library(rpart)
library(mlbench)
data(BostonHousing)
set.seed(111)
train<-sample(1:nrow(BostonHousing),400)
BostonHousing$train<-FALSE
BostonHousing$train[train]<-TRUE
BostonHousing_train<-BostonHousing[BostonHousing$train,]
BostonHousing_test<-BostonHousing[!BostonHousing$train,]
BostonHousing_train$train<-NULL
arbol_housing <- rpart(medv~.,data=BostonHousing_train,method="anova",control=rpart.control(cp=0.001,xval=10))
printcp(arbol_housing)
plotcp(arbol_housing)
mean((predict(arbol_housing, BostonHousing_test)-BostonHousing_test$medv)^2)
errores.vmc
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = i, prueba = error.prueba,
entrenamiento = error.entrena)
})
err.m <- errores.vmc %>%
errores.vmc
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
errores.vmc
library(randomForest)
library(rpart)
library(mlbench)
data(BostonHousing)
set.seed(15)
train<-sample(1:nrow(BostonHousing),400)
BostonHousing$train<-FALSE
BostonHousing$train[train]<-TRUE
BostonHousing_train<-BostonHousing[BostonHousing$train,]
BostonHousing_test<-BostonHousing[!BostonHousing$train,]
BostonHousing_train$train<-NULL
arbol_housing <- rpart(medv~.,data=BostonHousing_train,method="anova",control=rpart.control(cp=0.001,xval=10))
printcp(arbol_housing)
install.packages("tufte")
library(tufte)
install.packages("ggplot2")
require(ggdendro)
install.packages("ggdendro")
install.packages("plyr")
install.packages("dplyr")
install.packages("kknn")
install.packages("tidyr")
install.packages("rpart")
install.packages("tree")
install.packages("mlbench")
install.packages("randomForest")
install.packages("gbm")
