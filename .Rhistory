datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion <- function(p){
f <- max(p,1-p)
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x))
clasificacion <- function(p){
f <- max(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)
)
clasificacion(.5)
clasificacion(.2)
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x)) %>%
mutate(clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
ungroup() %>%
mutate(gini = gini(x), entropia = entropia(x)) %>%
mutate(clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion(datos$x)
clasificacion <- function(p){
f <- pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
gather(variable, valor, -x)
geom_line()
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log10(p) - (1-p)*log10(1-p)
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log2(p) - (1-p)*log2(1-p)
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
f <- f/2
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log2(p) - (1-p)*log2(1-p)
f <- f/2
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(from = 0.0001,to = 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(from = 0.1,to = 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.1, 1, .0001 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(0.01, 1, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(0.01, .999, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.001, .999, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.001, .999, length =300 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1.5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1.5, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
ggplot() +
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
plotcp(modelo.arb.completo)
(error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror) )
alpha <- error.completo$CP
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena.arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba.arb)- prueba.arb$medv)^2)
data.frame(CP = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
(error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror) )
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
# cp = 25
plotcp(modelo.arb.completo)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
alpha <- error.completo$CP
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena.arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba.arb)- prueba.arb$medv)^2)
data.frame(CP = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
errores.vmc
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 25) +
xlab("Altura del árbol") +
ylab("Error")
error.completo %>% head(40)
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 15) +
xlab("Altura del árbol") +
ylab("Error")
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 19) +
xlab("Altura del árbol") +
ylab("Error")
modelo.arb.final <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=.00269 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.final , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 3, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 3, vjust = 1) +
theme_dendro()
#error de prueba
mean((predict(modelo.arb.final, prueba.arb)- prueba.arb$medv)^2)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
# cp = 15 (25)
plotcp(modelo.arb.completo)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
shiny::runApp('shiny/sesgo_vs_varianza')
?BostonHousing
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench)
?BostonHousing
require(gtools)
library(rngtools)
dv <- c(1,3,4,5,5); covariate <- c(2,2,5,4,5)
perms <- permutations(5,5,dv,set=FALSE)
install.packages(gtools)
install.packages("gtools")
library(rngtools)
perms <- permutations(5,5,dv,set=FALSE)
perms <- permutations(5,5,dv,set=FALSE)
require(gtools)
dv <- c(1,3,4,5,5); covariate <- c(2,2,5,4,5)
dv
covariate
perms <- permutations(5,5,dv,set=FALSE)
perms
cors <- apply(perms, 1, function(perms_row) cor(perms_row,covariate))
# now calculate correlations for all perms with covariate:
cors
cors <- cors[order(cors)]
cors
length(cors[cors>=cor(dv,covariate)])/length(cors)
length(cors[cors>=cor(dv,covariate)])/length(cors)
cor(dv,covariate)])
cor(dv,covariate
)
length(cors[cors>=cor(dv,covariate)])
length(cors)
library(tidyr)
install.packages("partykit")
library(partykit)
modelo <- ctree(Species ~ Sepal.Width + Petal.Width, data = iris)
modelo <- ctree(as.formula(Species ~ Sepal.Width + Petal.Width), data = iris)
modelo <- ctree(as.formula("Species ~ Sepal.Width + Petal.Width"), data = iris)
iris
?ctree()
modelo <- ctree(formula = Species ~ Sepal.Width + Petal.Width, data = iris)
library(mlbench)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
## Modelo completo
modelo <- ctree(medv~., data = entrena.arb)
irisct <- ctree(Species ~ .,data = iris)
modelo <- partykit::ctree(medv~., data = entrena.arb)
require(ggplot2)
require(ggdendro)
require(plyr)
require(dplyr)
require(tidyr)
require(kknn)
require(rpart)
require(tree)
require(mlbench)
require(randomForest)
require(gbm)
require(data.table)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
## Modelo completo
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
modelo <- ctree(medv~., data = entrena.arb)
install.packages("Formula")
library(Formula)
modelo <- ctree(medv~., data = entrena.arb)
plot(modelo)
modelo <- ctree(formula = Species ~ Sepal.Width + Petal.Width, data = iris)
plot(modelo)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
## Modelo completo
modelo <- ctree(medv~., data = entrena.arb)
plot(modelo)
modelo <- ctree(medv~ Istat + rm + crim + tax., data = entrena.arb)
modelo <- ctree(medv~ istat + rm + crim + tax., data = entrena.arb)
head(entrena.arb)
modelo <- ctree(medv~ stat + rm + crim + tax., data = entrena.arb)
modelo <- ctree(medv~ lstat + rm + crim + tax., data = entrena.arb)
modelo <- ctree(medv~ lstat + rm + crim + tax, data = entrena.arb)
plot(modelo)
modelo <- ctree(medv~ lstat + rm + crim , data = entrena.arb)
plot(modelo)
modelo <- ctree(medv~ lstat + rm , data = entrena.arb)
plot(modelo)
modelo <- ctree(medv~., data = entrena.arb)
mean((predict(modelo, prueba.arb)- prueba.arb$medv)^2)
modelo.arb.final <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=.0035 , xval=10, minbucket=1))
mean((predict(modelo.arb.final, prueba.arb)- prueba.arb$medv)^2)
control.visible <- ctree_control(maxdepth =  3)
modelo <- ctree(medv~ lstat + rm , data = entrena.arb, control = control.visible)
plot(modelo)
control.visible <- ctree_control(maxdepth =  3)
modelo <- ctree(medv~. , data = entrena.arb, control = control.visible)
plot(modelo)
24100*.75
24100*.75 - 11892
6183*26
40000/26
