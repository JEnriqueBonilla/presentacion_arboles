function(i) {
modelo <- rpart(medv~., data = entrena_arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena_arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba_arb)- prueba_arb$medv)^2)
data.frame(alpha = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
errores.vmc
library(randomForest)
library(rpart)
library(mlbench)
data(BostonHousing)
set.seed(15)
train<-sample(1:nrow(BostonHousing),400)
BostonHousing$train<-FALSE
BostonHousing$train[train]<-TRUE
BostonHousing_train<-BostonHousing[BostonHousing$train,]
BostonHousing_test<-BostonHousing[!BostonHousing$train,]
BostonHousing_train$train<-NULL
arbol_housing <- rpart(medv~.,data=BostonHousing_train,method="anova",control=rpart.control(cp=0.001,xval=10))
printcp(arbol_housing)
install.packages("tufte")
library(tufte)
install.packages("ggplot2")
require(ggdendro)
install.packages("ggdendro")
install.packages("plyr")
install.packages("dplyr")
install.packages("kknn")
install.packages("tidyr")
install.packages("rpart")
install.packages("tree")
install.packages("mlbench")
install.packages("randomForest")
install.packages("gbm")
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench) #data BostonHousing
control.completo <- rpart.control(cp=0, minsplit=10,
minbucket=1, xval=10, maxdepth=30)
arbol1 <- tree(Species ~ Sepal.Width + Petal.Width, data = iris)
arbol2 <- rpart(Species ~ Sepal.Width + Petal.Width, method = "class",
data = iris, control = control.completo)
ddata <- dendro_data(arbol2, uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 5, vjust = 1) +
theme_dendro() #+ scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
plot(iris$Petal.Width, iris$Sepal.Width, pch=19,col=as.numeric(iris$Species))
partition.tree(arbol1, label="Species", add = T)
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
gini <- f(p){
f <- 1-p^2 -(1-p)^2
return(f)
}
gini <- function(p){
f <- 1-p^2 -(1-p)^2
return(f)
}
entropia <- function(p){
f <- -p*log(p) - (1-p)*log(1-p)
return(f)
}
clasificacion <- function(p){
f <- (1-p)
return(f)
}
datos <- data.frame(x = seq(0, 1, by=.01 ), gini = gini(x),
entropia = entropia(x), clasificacion = clasificacion(x))
datos <- data.frame(x = seq(0, 1, by=.01 ))
datos <- data.frame(x = seq(0, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x))
datos
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x))
datos %>% gggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion <- function(p){
f <- (1-max(p,1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
p <- .5
max(p,1-p)
p <- .3
max(p,1-p)
datos
clasificacion <- function(p){
f <- (1-max(p,1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion <- function(p){
f <- max(p,1-p)
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x))
clasificacion <- function(p){
f <- max(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)
)
clasificacion(.5)
clasificacion(.2)
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x)) %>%
mutate(clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
ungroup() %>%
mutate(gini = gini(x), entropia = entropia(x)) %>%
mutate(clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion(datos$x)
clasificacion <- function(p){
f <- pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
gather(variable, valor, -x)
geom_line()
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line()
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log10(p) - (1-p)*log10(1-p)
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log2(p) - (1-p)*log2(1-p)
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
f <- f/2
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
entropia <- function(p){
f <- -p*log2(p) - (1-p)*log2(1-p)
f <- f/2
return(f)
}
clasificacion <- function(p){
f <- 1-pmax(p,(1-p))
return(f)
}
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.0001, 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(from = 0.0001,to = 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(from = 0.1,to = 1, by=.01 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.1, 1, .0001 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(0.01, 1, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos
datos <- data.frame(x = seq(0.01, .999, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.001, .999, length =100 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
datos <- data.frame(x = seq(0.001, .999, length =300 )) %>%
mutate(gini = gini(x), entropia_escalada = entropia(x),
clasificacion = clasificacion(x)) %>%
gather(variable, valor, -x)
datos %>% ggplot(aes(x = x, y = valor, group = variable, color = variable)) +
geom_line() + ylab("y")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1.5, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1.5, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
ggplot() +
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
plotcp(modelo.arb.completo)
(error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror) )
alpha <- error.completo$CP
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena.arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba.arb)- prueba.arb$medv)^2)
data.frame(CP = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
(error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror) )
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
# cp = 25
plotcp(modelo.arb.completo)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
alpha <- error.completo$CP
errores.vmc <- ldply(alpha,
function(i) {
modelo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=i , xval=10, minbucket=1))
error.entrena <- mean((predict(modelo) - entrena.arb$medv)^2)
error.prueba <- mean((predict(modelo, prueba.arb)- prueba.arb$medv)^2)
data.frame(CP = as.numeric(i), prueba = error.prueba,
entrenamiento = error.entrena)
})
errores.vmc
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 25) +
xlab("Altura del árbol") +
ylab("Error")
error.completo %>% head(40)
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 15) +
xlab("Altura del árbol") +
ylab("Error")
errores.vmc %>%
left_join(error.completo %>%
dplyr::select(-xerror)) %>%
gather(variable, valor, -CP, -nsplit) %>%
ggplot(aes(x = nsplit, y = valor,
colour = variable,
group = variable)) +
geom_line() +
geom_vline(xintercept = 19) +
xlab("Altura del árbol") +
ylab("Error")
modelo.arb.final <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=.00269 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.final , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 3, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 3, vjust = 1) +
theme_dendro()
#error de prueba
mean((predict(modelo.arb.final, prueba.arb)- prueba.arb$medv)^2)
data(BostonHousing)
set.seed(15)
train <- sample(1:nrow(BostonHousing),400)
BostonHousing$train <- F
BostonHousing$train[train] <- T
entrena.arb <- BostonHousing[BostonHousing$train,]
prueba.arb <- BostonHousing[!BostonHousing$train,]
entrena.arb$train <- NULL
modelo.arb.completo <- rpart(medv~., data = entrena.arb, method = "anova",
control=rpart.control(cp=0 , xval=10, minbucket=1))
ddata <- dendro_data(modelo.arb.completo , uniform =T)
ggplot() +
geom_segment(data = ddata$segments,
aes(x = x, y = y, xend = xend, yend = yend), colour = "brown", size = 1) +
geom_text(data = ddata$labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = -1) +
geom_text(data = ddata$leaf_labels,
aes(x = x, y = y, label = label), colour = "#006633", size = 1, vjust = 1) +
theme_dendro() + scale_y_reverse(expand = c(0.2, 0)) + coord_polar(theta="x")
# cp = 15 (25)
plotcp(modelo.arb.completo)
error.completo <- modelo.arb.completo$cptable %>%
data.frame() %>%
dplyr::select(nsplit, CP, xerror)
error.completo %>% head(40)
shiny::runApp('shiny/sesgo_vs_varianza')
?BostonHousing
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggdendro)
library(tree)
library(rpart)
library(mlbench)
?BostonHousing
